name: DeCoin Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
    
    - name: Run linting
      run: |
        pip install flake8 black mypy
        # Black formatting check
        black --check src/ tests/
        # Flake8 linting
        flake8 src/ tests/ --max-line-length=100 --ignore=E203,W503
        # Type checking
        mypy src/ --ignore-missing-imports
      continue-on-error: true
    
    - name: Run unit tests
      run: |
        pytest tests/unit/ -v --cov=src --cov-report=xml --cov-report=term
    
    - name: Run integration tests
      run: |
        pytest tests/integration/ -v --cov=src --cov-report=xml --cov-report=term --cov-append
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  docker-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Build test Docker image
      run: docker build -t decoin-test -f Dockerfile.test .
    
    - name: Run tests in Docker
      run: docker run --rm decoin-test
    
    - name: Build main Docker image
      run: docker compose build
    
    - name: Test Docker Compose setup
      run: |
        docker compose up -d
        sleep 10
        # Test that API is responding
        curl -f http://localhost:8080/health || exit 1
        curl -f http://localhost:8080/status || exit 1
        docker compose down

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Run security checks
      run: |
        pip install safety bandit
        safety check
        bandit -r src/ -ll
      continue-on-error: true